//////////////////////////
/// REACT + REDUX

    // useReducer() -> a technique for managning useState

//////////////////////////
/// USEREDUCER HOOK

    // useState() -> useReducer() 

    // easy: 

    // outside of the component 
    function reducer(state, action) {
      return state + action;
    }

    const [count, dispatch] = useReducer(reducer, 0);

    // when to update the state. 

    dispatch(1);  // we can pass anything here 'also object' , like 1 function but we can configure it to perform different actions using ojbect. 

    // 1 will become action and state is current state value. 

    // EXAMPLE: 

              // outside of the component. 
              function reducer(state, action) {
                if (action.type === "inc") return state + action.payload;
                if (action.type === "dec") return state - action.payload;
                if (action.type === "setCount") return action.payload;
              }

              // inside the component 
              const [count, dispatch] = useReducer(reducer, 0);
              const dec = function () {
                dispatch({ type: "dec", payload: 1 });
              };
              const inc = function () {
                dispatch({ type: "inc", payload: 1 });
              };
              const defineCount = function (e) {
                dispatch({ type: "setCount", payload: Number(e.target.value) });
              };

//////////////////////////
/// A GOOD USE OF REDUCER HOOK

  // file_1.js  


//////////////////////////
/// WHEN TO USE

  // useReducer is a middle man between dispatcher and state.
  // Bank and user example 


//////////////////////////
/// CREATING A FAKE API FOR JSON FILES 

  // to install the server
      npm i json-server

  // add this in npm script 
      "server": "json-server --watch data/questions.json --PORT 8765"

  // to run the script 
      npm run server

  // tip: the json file should have 1 opject with the property , of that extension 
  // example { "questions": ...data } -> url: localhost:8765/questions

  // while using reducer , we dont need to use handler function , we can do the same with dispatcher() 
  // passing it to the component with props 


//////////////////////////
/// USEEFFECT TO SET TIMEER

  // When timer coponent loads
  useEffect(()=> {
    setInterval(()=> {
      dispatch({type: 'tick'});
    } , 1000);
  }, [] );

  // this will triger a tick case , it will update the time left in the reducer function. 

  example look in file_2.js



































