1. Advance React Router
2. Adding Redux to project. 

//////////////////////////
/// REDUX (2023-09-30)
//////////////////////////
NOTES:

  1. installing redux.
    npm i @reduxjs/toolkit react-redux 

  // inside feature/user/userSlice.js
  2. initial object

    const initialObject = {
      username: "",
    };

  3. creating slice

    import { createSlice } from "@reduxjs/toolkit";

    const userSlice = createSlice({
      name: "user",
      initialState,
      reducers: {
        updateName(state, action) {
          state.username = action.payload;
        },
      },
    });

    export const { updateName } = userSlice.actions;
    export default userSlice.reducer;

  4. create store

    create a file: store.js in src/

    // inside that file

    import userSlice from "./features/user/userSlice";
    import { configureStore } from "@reduxjs/toolkit";

    const store = configureStore({
      reducer: {
        user: userSlice,
      },
    });

    export default store;

  5. connecting store with react app. 
    // in main.jsx

    import React from "react";
    import ReactDOM from "react-dom/client";
    import App from "./App.jsx";
    import "./index.css";
    import { Provider } from "react-redux";
    import store from "./store.js";

    ReactDOM.createRoot(document.getElementById("root")).render(
      <React.StrictMode>
        <Provider store={store}>  // THIS 
          <App />
        </Provider>
      </React.StrictMode>,
    );

  6. using the state 
    // inside User.jsx component
    import { useSelector } from "react-redux";

    function Username() {
      const username = useSelector((state) => state.user.username);
      return (
        <div className="hidden text-sm font-semibold md:block">{username}</div>
      );
    }

    export default Username;

  7. updating the state. 
    // inside CreateUser.jsx;
    import { useDispatch } from "react-redux";
    import { updateName } from "./userSlice";

    function handleSubmit(e) {
      e.preventDefault();
      if (!username) return;
      dispatch(updateName(username));
    }

  // EXAMPLE OF A COMPLEX SELECTOR FUNCTION

    const totalCartQuantitys = useSelector((state) =>
      state.cart.cart.reduce((acc, ele) => {
        return sum + ele.quantity;
      }, 0),
    );

    // recomended is to store the complex function inside the slice file , and use in in the useSelector();

    export const getTotalCartQuantity = (state) =>
      state.cart.cart.reduce((acc, ele) => {
        return acc + ele.quantity;
      }, 0);

    const totalCartQuantity = useSelector(getTotalCartQuantity);

  // to call reducers from another reducers 
      decreaseItemQuantity(state, action) {
        const item = state.cart.find((item) => item.pizzaId === action.payload);
        item.quantity--;
        item.totalPrice = item.quantity * item.unitPrice;
        if (item.quantity === 0) cartSlice.caseReducers.deleteItem(state, action);
      },

//////////////////////////
/// ADVANCE REDUX THUNKS (2023-10-01)
//////////////////////////
NOTES:

  // This is redux way of creating thunks
  // createAsyncThunk

  1. add this in userSlice.js
    1p = name of the action creater,
    2p = a async function that returns the payload to the reducer function;

    export const fetchAddress = createAsyncThunk("user/fetchAddress", async function () {
      // 1) We get the user's geolocation position
      const positionObj = await getPosition();
      const position = {
        latitude: positionObj.coords.latitude,
        longitude: positionObj.coords.longitude,
      };

      // 2) Then we use a reverse geocoding API to get a description of the user's address, so we can display it the order form, so that the user can correct it if wrong
      const addressObj = await getAddress(position);
      const address = `${addressObj?.locality}, ${addressObj?.city} ${addressObj?.postcode}, ${addressObj?.countryName}`;

      // 3) Then we return an object with the data that we are interested in
      return { position, address };
    });

  2. inside the userSlice createSlice function;

    reboot: 
      export const fetchAddress = createAsyncThunk(
        "user/fetchAddress",
        async function () {
          // 1) We get the user's geolocation position
          const positionObj = await getPosition();
          const position = {
            latitude: positionObj.coords.latitude,
            longitude: positionObj.coords.longitude,
          };

          // 2) Then we use a reverse geocoding API to get a description of the user's address, so we can display it the order form, so that the user can correct it if wrong
          const addressObj = await getAddress(position);
          const address = `${addressObj?.locality}, ${addressObj?.city} ${addressObj?.postcode}, ${addressObj?.countryName}`;

          // 3) Then we return an object with the data that we are interested in
          return { position, address };
        },
      );

    const initialState = {
      username: "",
      status: "idle",
      position: {},
      address: "",
      error: "",
    };

    const userSlice = createSlice({
      name: "user",
      initialState,
      reducers: {
        updateName(state, action) {
          state.username = action.payload;
        },
      },
      // this is an add on
      extraReducers: (builder) =>
        builder
          .addCase(
            fetchAddress.pending,
            (state, action) => (state.status = "loading"),
          )
          .addCase(fetchAddress.fulfilled,
          (state, action) => {
            state.position = action.payload.position;
            state.address = action.payload.address;
            state.status = "idle";
          })
          .addCase(fetchAddress.rejected,
          (state, action) => {
            state.status = "error";
            state.error = action.error.message;
          }),
    });

    // it returns 3 status , pending , error , fullfiled for each status , we can update the state

  3. using it inside the component. 

    // it is same as dispatch 

    <button onClick={() => dispatch(fetchAddress())}>Get Position</button>

//////////////////////////
/// USEFETCHER (2023-10-02)
//////////////////////////
NOTES:

  // how to fetch data without navigation  (without moving to other page.)
  // inside the file where we want to fetch. 

  1. set up fetcher
    import { useFetcher } from "react-router-dom";
    const fetcher = useFetcher();
      
    useEffect(function() {
      if(!fetcher.data && fetcher.state === 'idle')  fetcher.load('/menu');
    }  [fetcher]);

  // we fetch the same data from other rout's that we have already created. 
  // like /menu have some work of fetching the data , we want the same thing in /order/:orderId route

  2. using that fetcher data
    EXAMPLE: 

          <ul className="divide-y divide-stone-200 border-b border-t">
            {cart.map((item) => (
              <OrderItem
                item={item}
                key={item.id}
                isLoadingIngredients={fetcher.state === "loading"}
                ingredients={
                  fetcher?.data?.find((el) => el.id === item.pizzaId)
                    ?.ingredients ?? []
                }
              />
            ))}
          </ul>

//////////////////////////
/// UPDATE DATA WITH USEFETCHER (2023-10-02)
//////////////////////////
NOTES:

  // revalidation : data change -> refetch the data -> rerender the page with that data. 

  // here there is just 1 button so short exmple. 

  // component (UpdateOrder.jsx)
  1. create the fetcher form

    const fetcher = useFetcher();

    return <fetcher.Form method="PATCH">
            <button>click</button>
          </fetcher.Form>

  2. create an action
    export async function action({request , params})  {
      const data = { priority: true }; 
      await updateOrder(params.orderId  , data);
      return null;
    }
    
    updateOrder() function:
              export async function updateOrder(id, updateObj) {
                try {
                  const res = await fetch(`${API_URL}/order/${id}`, {
                    method: 'PATCH',
                    body: JSON.stringify(updateObj),
                    headers: {
                      'Content-Type': 'application/json',
                    },
                  });

                  if (!res.ok) throw Error();
                  // We don't need the data, so we don't return anything
                } catch (err) {
                  throw Error('Failed updating your order');
                }
              }

  // App.jsx
  3. connect the action and route
    import { action: updateOrderAction } from "UpdateOrder.jsx";

    {
      action: updateOrderAction,
    }







