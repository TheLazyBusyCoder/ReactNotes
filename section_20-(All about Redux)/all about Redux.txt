//////////////////////////
/// REDUX

  // 3rd party library , to manage global state. 

  // Context api + useReducer hook ~= REDUX

  // if you want to manage lot of not remote state in your app , use redux. 

  // REDUCER: store.js
      function reducer(state = initialStage, action) {
        switch (action.type) {
          case "account/deposit":
            return { ...state, balance: state.balance + action.payload };
          case "account/withdraw":
            return { ...state, balance: state.balance - action.payload };
          case "account/requestLoan":
            if (state.loan > 0) return state;
            return { ...state, loan: action.payload };
          case "account/payLoan":
            return {
              ...state,
              loan: 0,
              loanPurpose: "",
              balance: state.balance - state.loan,
            };
          default:
            return state;
        }
      }

  it is little bit same as useReducer Hook. 

  // Creating a Redux Store. 

  npm install redux 

//////////////////////////
/// OLD WAY OF REDUX (DEAD)

      // store.js (same file where the reducer function is)

      import {createStore} from "redux";

      const store = createStore(reducer);

      store.dispatch({ type: "account/deposit", payload: 500 });

      // to get the current state. 
      store.getState(); 

      // Action creators. (good way of redux)

          function deposit(amount) {
            return { type: "account/deposit", payload: amount };
          }
          function withdraw(amount) {
            return { type: "account/withdraw", payload: amount };
          }
          function requestLoan(amount) {
            return { type: "account/requestLoan", payload: amount };
          }
          function payloan() {
            return { type: "account/payLoan" };
          }

          store.dispatch(deposit(500));

      // We can have multiple reducer function and multiple reducer stores 
      combineReducer()
      root concept
      // read the example to understand
      EXAMPLE:

              import { combineReducers, createStore } from "redux";

              const initialStateAccount = {
                balance: 0,
                loan: 0,
                loanPurpose: "",
              };

              const initialStateCustomer = {
                fullName: "",
                nationalID: "",
                createdAt: "",
              };

              function accountReducer(state = initialStateAccount, action) {
                switch (action.type) {
                  case "account/deposit":
                    return { ...state, balance: state.balance + action.payload };
                  case "account/withdraw":
                    return { ...state, balance: state.balance - action.payload };
                  case "account/requestLoan":
                    if (state.loan > 0) return state;
                    return {
                      ...state,
                      loan: action.payload.amount,
                      loanPurpose: action.payload.purpose,
                      balance: state.balance + action.payload.amount,
                    };
                  case "account/payLoan":
                    return {
                      ...state,
                      loan: 0,
                      loanPurpose: "",
                      balance: state.balance - state.loan,
                    };
                  default:
                    return state;
                }
              }

              function customerReducer(state = initialStateCustomer, action) {
                switch (action.type) {
                  case "customer/createCustomer":
                    return {
                      ...state,
                      fullName: action.payload.fullName,
                      nationalID: action.payload.nationalID,
                      createdAt: action.payload.createdAt,
                    };

                  default:
                    return state;
                }
              }

              const rootReducer = combineReducers({
                account: accountReducer,
                customer: customerReducer,
              });

              const root = createStore(rootReducer);

              /* store action listoners */
              function deposit(amount) {
                return { type: "account/deposit", payload: amount };
              }
              function withdraw(amount) {
                return { type: "account/withdraw", payload: amount };
              }
              function requestLoan(amount, purpose) {
                return { type: "account/requestLoan", payload: amount, purpose };
              }
              function payloan() {
                return { type: "account/payLoan" };
              }

              /* customer action listener */
              function createCustomer(fullName, nationalID) {
                return {
                  type: "customer/createCustomer",
                  payload: {
                    fullName,
                    nationalID,
                    createdAt: new Date().toISOString(),
                  },
                };
              }

              function updateName(fullName) {
                return {
                  type: "customer/updateName",
                  payload: {
                    fullName,
                  },
                };
              }

              root.dispatch(createCustomer("leo", "134233214"));
              root.dispatch(deposit(500));

      // Orginazing code.

      // we have to splitting the code in features. 
      // 1.account features , 2. customer features. 

      folder structure.
      src
        features 
          accounts
          customers

      now shift the components to the desired folders , accounts related component to accounts. etc

      create accountSlice.js in the accounts folder. 

      move the redux logic of account to accounts and export default the reducer , and named export action listeners. 

      export default store;

      // connecting react and redux. 

      npm install react-redux

      // index.js

      import { Provider } from 'react-redux';
      import store from 'location/of/sotore/file';

      // wrap our application in this 
      <Provider store={store}>
        <App />
      </Provider>

      // Reading the state. 

      import {useSelector} from 'react-redux';

      // inside the component. 

      // to get the data. ( This creates a subscription to the store. )

      const customer = useSelector((store)=>store.customer)
      const fullName = useSelector((store)=>store.customer.fullName)

      // whenever the state changes , the component subscribed to the sotre will rerender.

      To get access to dispatch functino 

      // inside component. 

      import {useDispatch} from 'react-redux';

      const dispatch = useDispatch();

      // to use it. 
      // inside the component. 

      dispatch(createCustomer(fullName , nationalID));

//////////////////////////
/// OLD WAY OF REDUX (DEAD) GOOD UNDERSTANDING

  1. initial state. 
    const initialState = {
      balance: 0,
      loan: 0,
      whyLoad: "",
    };
  2. reducer funciton
    function reducer(state = initialState, action) {
      switch (action.type) {
        case "account/deposit":
          return { ...state, balance: state.balance + action.payload };
        case "account/withdraw":
          return { ...state, balance: state.balance - action.payload };
        case "account/requestLoan":
          if (state.loan > 0) return state;
          return {
            ...state,
            loan: action.payload.amount,
            whyLoan: action.payload.purpose,
            balance: state.balance + action.payload.amount,
          };
        case "account/payLoan":
          return {
            ...state,
            loan: 0,
            whyLoan: "",
            balance: state.balance - state.loan,
          };
        default:
          return state;
      }
    }
  3. create store
    npm install redux
    import { createStore } from "redux";
    const store = createStore(reducer);
    store.dispatch({ type: "account/deposit", payload: 500 });  // perform action.
    store.getState(); //get state data. 
  4. create action creators. 
    function deposit(amount) {
      return {
        type: "account/deposit",
        payload: amount,
      };
    }

    function withdraw(amount) {
      return {
        type: "account/widthdraw",
        payload: amount,
      };
    }

    function requestLoan(amount, purpose) {
      return {
        type: "account/requestLoan",
        payload: { amount, purpose },
      };
    }

    function payLoan() {
      return {
        type: "account/payLoan",
      };
    }

    store.dispatch(deposit(500)); //using it.
  5. to create multiple store.

    // every thing is same , but changes in the store code. 

    import {combineReducers} from "redux";

    const rootReducer = combineReducers({
      account: accountReducer,
      customer: customerReducer,
    });

    store = createStore(rootReducer);

    store.dispatch(deposit(500)); // to use it.   
  6. refactoring 

        folder structure.
        src
          features 
            accounts
            customers

  // move components to desired location. 
  // cut paste in accountSlice.js

  1. default export of the reducer function.
  2. named export of the actionListener's 
  3. import the reducer in the store.js
  4. import the actionListeners in the component where you want to use it.
  5. import the store in the index.js
  6. connection redux and react app

    npm i react-redux

    // index.js 
    import {Provider} from 'react-redux';

    // wrap the App component in the <Provider store={store}></Provider>
  7. read data in the component. 

    import {useSelector} from 'react-redux';
    const data = useSelector(store => store.customer.name);
  8. dispatching actions

    // inside the component. 
    //we get access to dispatch function. 
    import {useDispatch} from 'react-redux';
    
    const dispatch = useDispatch();

    // import actionListoners in the component
    import {deposit} from './location';
    dispatch(deposit(500));

//////////////////////////
/// REDUX MIDDLEWARE AND THUNKS

  Middle ware stays between dispatch and store , so that we can do API calls , in Redux.

  Middle ware = Thunks

  // USING

  npm install redux-thunk

  import thunk from 'redux-thunk'

  // changes in the store.js

  const store = createStore(rootReducer , applyMiddleware(thunk));

  // so when we return from the action listener , we can return an funciton 
  // inside action listener function. 
  return async function(dispatch ,getState) {
    // API call

    const res  = await fetch();

    const data = await res.json();

    dispatch({
      type: '' , payload: aaaa,
    })
  }

  // then we call the function directly

  dispatch(deposit(amount , currency));

  // When redux see's that we are dispatching a function , it calls it. 

//////////////////////////
/// REDUX DEV TOOLS

  // install the extension.

  npm install redux-devtools-extension

  import { componseWithDevTools } from "redux-devtools-extension"

  const store = createStore(rootReducer , composeWithDevTools(appyMiddleware(thunk)))

  // use it and learn

//////////////////////////
/// MORDEN WAY OF WRITING REDUX CODE (REDUX TOOLKIT)

  // Use less code , and achive same result.

  npm install @reactjs/toolkit

  // inside store.js
  import { configureStore } from '@reactjs/toolkit';

  const store = configureStore({
    reducer: {
      account: accountReducer,
      customer: customerReducer,
    }
  });

//////////////////////////
/// MORDEN WAY OF WRITING REDUX CODE (REDUX TOOLKIT) V1

  1. store stuff
    npm install @reduxjs/toolkit

    import {configureStore} from '@reduxjs/toolkit';

    const store = configureStore({
      reducers: {
        account: accountReducer,
        cutomer: customerReducer,
      }
    });
  2. slice. 
    // in the accountSlice.js

    import {createSlice} from '@reduxjs/toolkit';

    const accountSlice = createSlice({
      name: 'account',
      initialState,
      reducers: {
        deposit(state , action) {
          state.balance = state.balance + action.payload;
        },
        requestLoan: {
          // to convert parameters to an object. 
          prepare(amount , purpose) {
            return {
              payload: {amount , purpose}
            }
          },
          reducer(state , action) {
            ...logic
          }
        }
      }
    });

    export const {deposit} from accountSlice; 

    export default accoutSlice.reducer;
  3. thunks?

    no need to export it in the {} just name export it
    redux will automatically understand.

    rather then exporting { in this } 

    export function deposit() {

    }

//////////////////////////
/// CREATING SLICE

    import { createSlice } from "@reactjs/toolkit";
    // this will create action listners from our reducer
    // we dont need switch case. 

    // in the accountSlice.js
    // one reducer per action 
    // we can mutate original state , but behind the scens , it automatically converts back to normal code , like that return {...state } stuff. 

    const accountSlice = createSlice({
      name: 'account',
      initialState: initialState,
      reducers: {
        deposit(state , action) {
          state.balance = state.balance + action.payload;
        },
        withdraw(state , action) {
          state.balance -= action.payload;
        },
      }
    });

    export default accountSlice.reducer;

    // To export the functions. 

    export const {deposit , withdraw} = accountSlice; 

    // this default action creaters accept only 1 argument. action.payload

    // to solve this problem. 
    // to get multiple parameter. 
    const accountSlice = createSlice({
      name: 'account',
      initialState: initialState,
      reducers: {
        deposit(state , action) {
          state.balance = state.balance + action.payload;
        },
        withdraw(state , action) {
          state.balance -= action.payload;
        },
        requestLoan: {
          prepare(amount , purpose) {
            return {
              payload: {amount , purpose}
            }
          },
          reducer(state , action) {
            state.loan = action.payload.amount;
          }
        }
      }
    });

//////////////////////////
/// THUNKS IN RTK

  same as old  , but use your own action creater function. 
  and export it, and do not export it , export it seperatly


  // inside action listener function. 
  return async function(dispatch ,getState) {
    // API call

    const res  = await fetch();

    const data = await res.json();

    dispatch({
      type: '' , payload: aaaa,
    })
  }

//////////////////////////
/// CONTEXT API vs REDUX

  // context api = useReducer fully replace redux 

  context api
  1. Built into redux. 
  2. easy to setup 
  3. new Slice casuse new step up , provider hell
  4. async no support
  5. optimization is hard

  use: 
  global state managment in small application
  solve props drilling problem 

  redux
  1. more work
  2. once steup , easy to add new slices. 
  3. async support.
  5. optimization is hard. 

  global state managment in large application
