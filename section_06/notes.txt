//////////////////////////
/// Handling events
  // we declare the function in the App() component it self

  function handleButtonName() {
    
  }

  <button style={{ backgroundColor: "purple", color: "white" }} 
    onClick={function}
    onMouseEnter=(()=>{})
    >
    Previous
  </button>

//////////////////////////
/// STATE

  // state is a memory of an component
  // when state changes , react re renders that component 

  const array = useState(1);  => [1 , function ]  // it has 2 values , 1 is the default value which we provided and 2nd is the function to update state. 

  const [step, setStep] = useState(1);  // here destructuring help's 

  // all the functions that starts with use... <- are called hooks s
  // we are allowed to call the useState() or any other hook , only in the top level code , ex: inside App() {} not in if else , loops etc 

  // always use setStep <- to update the state. 
    export default function App() {
      const [step, setStep] = useState(1);
      const [isOpen, setIsOpen] = useState(true);

      function handlePrevious() {
        if (step >= 2) setStep(step - 1);
      }
      function handleNext() {
        if (step <= 3) setStep(step + 1);
      }

      return (
        <>
          <button className="close" onClick={() => setIsOpen(!isOpen)}>
            &times;
          </button>
          {isOpen && (
            <div className="steps">
              <div className="numbers">
                <div className={step >= 1 ? "active" : ""}>1</div>
                <div className={step >= 2 ? "active" : ""}>2</div>
                <div className={step >= 3 ? "active" : ""}>3</div>
              </div>
              <div className="message">
                Step {step} : {messages[step - 1]}
              </div>
              <div className="buttons">
                <button
                  style={{ backgroundColor: "purple", color: "white" }}
                  onClick={handlePrevious}
                >
                  Previous
                </button>
                <button
                  style={{ backgroundColor: "purple", color: "white" }}
                  onClick={handleNext}
                >
                  Next
                </button>
              </div>
            </div>
          )}
        </>
      );
    }

  // good practice is: setStep((s) => s + 1) -> by doing this we can use setStep() 2 times 

// CHALLANGE #1
#code
  export default function App() {
    const [step, setStep] = useState(1);
    const [count, setCount] = useState(0);

    const date = new Date("5 Sep 2023");
    date.setDate(date.getDate() + count);

    function handleStepa() {
      setStep((s) => s + 1);
    }
    function handleSteps() {
      if (step > 1) setStep((s) => s - 1);
    }

    function handleCounta() {
      setCount((c) => c + step);
    }
    function handleCounts() {
      setCount((c) => c - step);
    }

    return (
      <div>
        <button onClick={handleSteps}>-</button>
        Step: {step}
        <button onClick={handleStepa}>+</button>
        <br></br>
        <button onClick={handleCounts}>-</button>
        Count: {count}
        <button onClick={handleCounta}>+</button>
        <h1>
          {count} days from now is {date.toDateString()}
        </h1>
      </div>
    );
  }

//////////////////////////
/// FORMS IN REACT

// handled event on the form 

function handleSubmit(e) {
  e.preventDefault();
}

onSubmit={handleSubmit}

//////////////////////////
/// CONTROLLED ELEMENT

// define a peace of state => set the value={} => use onChange()
#code (understand this code )
    function Form() {

      const [desc, setDesc] = useState("");
      const [quant, setQuant] = useState(1);

      // handler function of the onSubmit
      function handleSubmit(e) {  
        e.preventDefault();

        if (!desc) return;

        const newItem = {
          desc,
          quant,
          packed: false,
          id: Date.now(),
        };

        console.log(newItem);

        setDesc("");
        setQuant(1); 
      }

      return (
        <form className="form" onSubmit={handleSubmit}>
          <h3>What do you nedd for your trip?</h3>

          // setting the value of select according to the value of state
          <select value={quant} onChange={(e) => setQuant(Number(e.target.value))}>
            {Array.from({ length: 20 }, (_, i) => {
              return i + 1;
            }).map((num) => {
              return <option key={num}>{num}</option>;
            })}
          </select>
          <input
            type="text"
            placeholder="Item..."
            value={desc}
            onChange={(e) => setDesc(e.target.value)}
          />
          <button>Add</button>
        </form>
      );
    }


// State vs Props
// whenever a state is updated in the parent , and if the state variable is passed to the child , when state changes the component is rerendered , so child is also rerendered


// CHALLANGE 
#code 
  import { StrictMode } from "react";
  import { createRoot } from "react-dom/client";
  import { useState } from "react";
  import "./styles.css";

  const data = [
    {
      id: 1,
      question: "question 1",
      answer: "answer"
    },
    {
      id: 2,
      question: "question 2",
      answer: "answer"
    },
    {
      id: 3,
      question: "question 3",
      answer: "answer"
    }
  ];

  function App() {
    let [ isSelect, setSelect ] = useState(0);

    return (
      <div className="cards-box">
        {data.map((ele) => {
          return (
            <div
              key={ele.id}
              className="box"
              onClick={() => {
                setSelect(ele.id === isSelect ? 0 : ele.id);
              }}
              style={ele.id === isSelect ? { backgroundColor: "red" } : {}}
            >
              {ele.id === isSelect ? ele.answer : ele.question}
            </div>
          );
        })}
      </div>
    );
  }

  const rootElement = document.getElementById("root");
  const root = createRoot(rootElement);

  root.render(
    <StrictMode>
      <App />
    </StrictMode>
  );
















